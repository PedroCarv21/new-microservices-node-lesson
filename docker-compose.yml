services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ms_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 15s
      timeout: 10s
      retries: 5

  users:
    build:
      context: .
      dockerfile: ./services/users-service/Dockerfile
    container_name: ms_users
    environment:
      PORT: 3001
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      EXCHANGE: app.topic
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3001"
    # ADICIONADO: Garante que o servidor web está pronto
    healthcheck:
      test: "curl -f http://localhost:3001/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5

  orders:
    build:
      context: .
      dockerfile: ./services/orders-service/Dockerfile
    container_name: ms_orders
    environment:
      PORT: 3002
      USERS_BASE_URL: http://users:3001
      HTTP_TIMEOUT_MS: 2000
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      EXCHANGE: app.topic
      QUEUE: orders.q
      ROUTING_KEY_USER_CREATED: user.created
    depends_on:
      rabbitmq:
        condition: service_healthy
      users:
        condition: service_healthy # MODIFICADO para esperar o users ficar saudável
    ports:
      - "3002:3002"

  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    container_name: ms_gateway
    environment:
      PORT: 3000
      USERS_URL: http://users:3001
      ORDERS_URL: http://orders:3002
    depends_on:
      # MODIFICADO: Agora espera os serviços estarem saudáveis
      users:
        condition: service_healthy
      orders:
        condition: service_started
    ports:
      - "3000:3000"